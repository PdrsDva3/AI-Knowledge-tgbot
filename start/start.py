"""
–ù–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫
"""
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from config import dp, bot
from db.db_student import get_teacher_list
from db.db_teacher import check_id
import start.keyboard as kb


@dp.callback_query(lambda c: c.data == "start")
async def process_callback(callback_query: CallbackQuery, state: FSMContext):
    user, i = check_id(callback_query.from_user.id)
    if i == 0:
        kb = [
            [
                InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="teacher"),
            ]]

        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        await callback_query.message.edit_text("–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", reply_markup=keyboard)
    else:
        kb = [
            [
                InlineKeyboardButton(text="–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="teacher"),
            ],
            [
                InlineKeyboardButton(text="setting", callback_data="setting_teacher"),
            ],
            [
                InlineKeyboardButton(text="new students", callback_data="new_students_teacher"),
            ],
            [
                InlineKeyboardButton(text="my students", callback_data="my_students_teacher"),
            ],
            [InlineKeyboardButton(text="return", callback_data="return_to_start")]
        ]

        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        DATA = """
                –ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,
                –ò–º—è        {}
                –£—Ä–æ–≤–µ–Ω—å       {}
                –°—Ñ–µ—Ä–∞      {}
                –û–ø–∏—Å–∞–Ω–∏–µ {}
                """
        await callback_query.message.edit_text(
            DATA.format(user.name, user.grade, user.sphere, user.description),
            reply_markup=keyboard)

start_message = """–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –æ—Ç AI Knowledge Club –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –∏ –º–æ–∫-–∏–Ω—Ç–µ—Ä–≤—å—é‚ö°Ô∏è

–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:
"""

@dp.callback_query(lambda c: c.data == "return_to_start")
async def cmd_start(callback_query: CallbackQuery):
    kb = [
        [InlineKeyboardButton(text="–•–æ—á—É –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="info")],
        [InlineKeyboardButton(text="–•–æ—á—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="start")],
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await callback_query.message.edit_text(start_message, reply_markup=keyboard)


INFO_TEXT = """
–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π:

‚öôÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

üîç –ü–æ–∏—Å–∫ - –ø–æ–∏—Å–∫ –ª—é–¥–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ

üëÄ –í–∏–¥–∏–º–æ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É –¥—Ä—É–≥–∏–º –ª—é–¥—è–º

üìã –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤ - —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—è–ª–∏ —Ç–µ–±—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
"""


@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = [
        [InlineKeyboardButton(text="–•–æ—á—É –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="info")],
        [InlineKeyboardButton(text="–•–æ—á—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="start")],
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer(start_message, reply_markup=keyboard)



@dp.callback_query(lambda query: query.data == "info")
async def student_info(callback: CallbackQuery):
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=INFO_TEXT,
        reply_markup=kb.info_and_continue_kb()
    )

